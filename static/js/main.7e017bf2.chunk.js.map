{"version":3,"sources":["styles/gobal.js","header/styles.js","header/index.js","about/index.js","blog/index.js","home/styles.js","home/index.js","resume/index.js","routes/index.js","app.js","serviceWorker.js","index.js"],"names":["styles","boxSizing","margin","body","backgroundColor","fontFamily","fontSize","width","maxWidth","border","GlobalStyles","marginTop","marginBottom","textAlign","h1","textTransform","paddingTop","ul","listStyleType","fontWeight","padding","li","display","marginRight","color","textDecoration","Header","css","to","About","className","Blog","useState","contents","setContents","useEffect","a","fetch","response","json","map","title","key","img","maxHeight","Home","src","alt","Resume","Routes","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAOMA,EAAS,CACb,IAAK,CACHC,UAAW,aACXC,OAAQ,GAEVC,KAAM,CACJC,gBARqB,OASrBC,WAAY,CAAC,QAAS,sBACtB,yBAA0B,cAC1B,0BAA2B,YAC3BC,SAAU,IAEZ,QAAS,CACPJ,OAAQ,SACRK,MAAO,MACPC,SAAU,IACVJ,gBAAiB,OACjBK,OAAO,aAAD,OArBiB,UAyBdC,EAAe,WAC1B,OAAO,kBAAC,IAAD,CAAQV,OAAQA,KC3BZA,EAAS,CAClBW,UDCiB,OCAjBC,aAAa,QAAD,ODAK,OCAL,SACZC,UAAW,SACXR,WAAY,CAAC,YAAa,aAC1BS,GAAI,CACAC,cAAe,YACfT,SAAU,OACVU,WDNa,OCObJ,aDPa,QCSjBK,GAAI,CACAC,cAAe,OACfZ,SAAU,OACVa,WAAY,OACZC,QAAS,GAEbC,GAAI,CACAC,QAAS,eACT,oBAAqB,CACjBC,YDlBS,SCqBjB,wBAAyB,CACrBC,MAAO,QACPC,eAAgB,QAEpB,UAAW,CACPD,MAAO,OACPC,eAAgB,cCzBXC,EAAS,WAClB,OACI,sBAAQC,IAAK3B,GACT,sBAAI,YAAC,IAAD,CAAM4B,GAAG,iBAAT,kBACJ,uBACI,sBACI,sBAAI,YAAC,IAAD,CAAMA,GAAG,uBAAT,UACJ,sBAAI,YAAC,IAAD,CAAMA,GAAG,sBAAT,SACJ,sBAAI,YAAC,IAAD,CAAMA,GAAG,wBAAT,e,OCZXC,EAAQ,WACjB,OACI,yBAAKC,UAAU,QACX,uC,iCCHCC,EAAO,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACjBC,EADiB,KACPC,EADO,KAWxB,OARAC,qBAAU,WACP,sBAAC,8BAAAC,EAAA,sEACuBC,MAAM,oCAD7B,cACMC,EADN,gBAEmBA,EAASC,OAF5B,OAEMA,EAFN,OAGAL,EAAYK,GAHZ,0CAAD,KAKA,CAACL,IAGF,yBAAKJ,UAAU,QACb,oCACCG,EAASO,KAAI,YAAc,IAAZC,EAAW,EAAXA,MACZ,OAAO,yBAAKC,IAAKD,GAAQA,QCjBtBzC,EAAS,CAClBI,gBAAiB,UACjBK,OAAQ,MACRI,UAAW,SACX8B,IAAK,CACDlC,OAAQ,iBACRD,SAAU,MACVoC,UAAW,QCFNC,EAAO,WAClB,OACE,mBAAKf,UAAU,OAAOH,IAAK3B,GACzB,mBAAK8C,IAAI,gCAAgCC,IAAI,4BCNtCC,EAAS,WAClB,OACI,yBAAKlB,UAAU,QACX,wCCGCmB,EAAS,WACpB,OACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,uBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,sBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,wBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,SCdGC,EAAM,WACjB,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDYsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7e017bf2.chunk.js","sourcesContent":["import React from 'react'\nimport { Global } from '@emotion/core'\n\nexport const borderColor = '#333'\nexport const space = '1rem'\nexport const baseColor = '#440'\n\nconst styles = {\n  '*': {\n    boxSizing: 'border-box',\n    margin: 0,\n  },\n  body: {\n    backgroundColor: baseColor,\n    fontFamily: ['serif', 'Cormorant Garamond'],\n    '-webkit-font-smoothing': 'antialiased',\n    '-moz-osx-font-smoothing': 'grayscale',\n    fontSize: 16,\n  },\n  '.page': {\n    margin: '0 auto',\n    width: '80%',\n    maxWidth: 800,\n    backgroundColor: '#eee',\n    border: `1px solid ${borderColor}`,\n  },\n}\n\nexport const GlobalStyles = () => {\n  return <Global styles={styles} />\n}\n","import { space } from '../styles/gobal'\n\nexport const styles = {\n    marginTop: space,\n    marginBottom: `calc(${space} * 2)`,\n    textAlign: 'center',\n    fontFamily: ['san-serif', 'Amatic SC'],\n    h1: {\n        textTransform: 'lowercase',\n        fontSize: '250%',\n        paddingTop: space,\n        marginBottom: space\n    },\n    ul: {\n        listStyleType: 'none',\n        fontSize: '150%',\n        fontWeight: 'bold',\n        padding: 0\n    },\n    li: {\n        display: 'inline-block',\n        ':not(:last-child)': {\n            marginRight: space\n        }\n    },\n    'a, a:hover, a:visited': {\n        color: 'black',\n        textDecoration: 'none'\n    },\n    'a:hover': {\n        color: 'pink',\n        textDecoration: 'underline'\n    } \n}","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport { Link } from 'react-router-dom'\n\nimport { styles } from './styles'\n\nexport const Header = () => {\n    return (\n        <header css={styles}>\n            <h1><Link to=\"/marcusgeduld\">Marcus Geduld</Link></h1>\n            <nav>\n                <ul>\n                    <li><Link to=\"/marcusgeduld/about\">about</Link></li>\n                    <li><Link to=\"/marcusgeduld/blog\">blog</Link></li>\n                    <li><Link to=\"/marcusgeduld/resume\">resume</Link></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}","import React from 'react'\n\nexport const About = () => {\n    return (\n        <div className=\"page\">\n            <h2>About</h2>\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react'\n\nexport const Blog = () => {\n  const [contents, setContents] = useState([])  \n\n  useEffect(() => {\n    ;(async () => {\n      const response = await fetch('/marcusgeduld/blog/contents.json')\n      const json = await response.json()\n      setContents(json)\n    })()\n  }, [setContents])\n\n  return (\n    <div className=\"page\">\n      <h2>Blog</h2>\n      {contents.map(({title}) => {\n          return <div key={title}>{title}</div>\n      })}\n    </div>\n  )\n}\n","export const styles = {\n    backgroundColor: 'inherit',\n    border: '0px',\n    textAlign: 'center',\n    img: {\n        border: '2px solid #eee',\n        maxWidth: '85%',\n        maxHeight: '85%'\n    }\n}","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\n\nimport { styles } from './styles'\n\nexport const Home = () => {\n  return (\n    <div className=\"page\" css={styles}>\n      <img src=\"/marcusgeduld/images/m001.jpg\" alt=\"paper-bag mask imgage\" />\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const Resume = () => {\n    return (\n        <div className=\"page\">\n            <h2>Resume</h2>\n        </div>\n    )\n}","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport { About } from '../about'\nimport { Blog } from '../blog'\nimport { Home } from '../home'\nimport { Resume } from '../resume'\n\nexport const Routes = () => {\n  return (\n      <Switch>\n        <Route path=\"/marcusgeduld/about\">\n          <About />\n        </Route>\n        <Route path=\"/marcusgeduld/blog\">\n          <Blog />\n        </Route>\n        <Route path=\"/marcusgeduld/resume\">\n          <Resume />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n  )\n}\n","import React from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nimport { GlobalStyles } from './styles/gobal'\nimport { Header } from './header'\nimport { Routes } from './routes'\n\nexport const App = () => {\n  return (\n    <div className=\"app\">\n      <GlobalStyles />\n      <Router>\n        <Header />\n        <Routes />\n      </Router>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { App } from './app'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}